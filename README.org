#+TITLE: Nanoprep: form/Characterize/Grow/Condition Nanopores with Keithley 2400 Sourcemeter
#+AUTHOR: Xavier Capaldi

Prepare nanopores using a [[https://pymeasure.readthedocs.io/en/latest/index.html#][PyMeasure]] interface with a Keithley 2400 Sourcemeter.
Please cite this project if you use it in your research:

#+BEGIN_SRC
@Misc{nanoprep,
  author = {Xavier Capaldi},
  title = {Nanoprep: nanopore formation, characterization, growth and conditioning with Keithley 2400 Sourcemeter},
  howpublished = {\url{https://github.com/xcapaldi/nanopores-with-keithley-2400}},
  note = {Accessed YYYY-MM-DD},
  year = 2022,
}
#+END_SRC

This program was heavily inspired by the following paper.
I strongly recommend citing it if you use this project for research that will be published.

#+BEGIN_SRC
@article{beamish-2012-precis-contr,
  author =	 {Eric Beamish and Harold Kwok and Vincent
                  Tabard-Cossa and Michel Godin},
  title =	 {Precise Control of the Size and Noise of Solid-State
                  Nanopores Using High Electric Fields},
  journal =	 {Nanotechnology},
  volume =	 23,
  number =	 40,
  pages =	 405301,
  year =	 2012,
  doi =		 {10.1088/0957-4484/23/40/405301},
  url =		 {https://doi.org/10.1088/0957-4484/23/40/405301},
  DATE_ADDED =	 {Tue Mar 2 10:06:05 2021},
}
#+END_SRC

** Drivers
The sourcemeter communicates with the computer via a GBIB-USB-HS+ adapter from National Instruments.

[[file:assets/gpib-to-usb.jpg][GPIB-USB-HS+ adapter]]

It has only been tested with Microsoft Windows due to the required drivers.
In particular I've tested with NI-VISA (v.20.0.0), NI-488.2 (v.19.0.0) on Windows 10.

[[https://www.ni.com/en-ca/support/downloads/drivers/download.ni-visa.html#346210][Install NI-VISA from here]]
[[https://knowledge.ni.com/KnowledgeArticleDetails?id=kA03q000000YGw4CAG&l=en-CA][Install the GPIB-USB driver from here]]

** Python dependencies
You will need Python 3.5 or higher installed.
You can check the dependencies using ~pip freeze~.
If you want to install all dependencies just run ~pip install -r requirements.txt~.
~requirements.txt~ simply holds the output of ~pip freeze~.
You may need to install ~PyQt5~ using ~pip~ as well.

** Conditioning
Note that this is not a professional program.
It was written by one person and is still a work in progress.
I recommend reading the source before using it for your own experiments so that you aren't surprised by how certain things are implemented.

[[file:assets/conditioning-interface.png][Conditioning interface]]

First you will need to set the data storage directory by clicking in the ~Directory~ field in the bottom left.
Every time you run a procedure, the data will be stored in that directory as a CSV file.
The file is named with the date and time of creation so it is impossible to have file name conflicts.
The procedure parameters will be stored as a comment at the top of the file.
Also the ~Comment~ field will be stored there so you can annotate your procedures as you run them.
Here is exert from an example data file:

#+BEGIN_SRC
#Procedure: <__main__.ConditioningProcedure>
#Parameters:
#	Compliance current (A): 1
#	Channel conductance (S): 0
#	Comment: This is an example comment
#	Conditioning/growth voltage (V): 6
#	Effective pore length (nm): 20
#	GPIB address: 19
#	Holding time (s): 5
#	Measurement voltage (mV): 400
#	Pipette offset (mV): 0
#	Progress style: absolute percentage
#	Protocol: square wave for time
#	Pulse time (ms): 500
#	Solution conductivity (mS/cm): 115.3
#	Target pore diameter (nm): 0
#	Target rectification ( >1 ): 1
#Data:
Time (s),Voltage (V),Current (A)
3.899999967416079e-06,-6,-2.200307e-08
0.20027410000000145,-6,-3.941258e-07
0.2705874000000108,6,4.643057e-07
0.3404413999999747,6,4.723929e-07
#+END_SRC

*** Initial parameters 
The parameters in the upper-left of the interface (above the ~Protocol~ selection dropdown) are usually set at the start of your experiment and then do not need to be changed.

~GPIB address~ is set in the software and on the sourcemeter itself.
You should not need to adjust this.

~Compliance current (A)~ is the upper limit of current the sourcemeter will allow.
This is a safety feature if you want to limit the max current.

~Solution conductivity (mS/cm)~ is the conductivity of your conditioning buffer.
Default value is set to literature values of 2M LiCl but you should measure your buffers anyway.

~Effective pore length (nm)~ can be approximated by your membrane thickness but in reality this value is poorly understood in pore size estimation.

~Channel conductance (S)~ is only necessary if you are using a 2-pore integrated device with microfluidics.
In that case, you should measure the conductance of the microfluidic channel associated with a pore and input it here for pore size estimations.

*** Other interface controls
In the interface you have several controls.
The most important is the ~Experiment Log~ tab.
Most procedures output helpful information via logging which can be read in this tab.

[[file:assets/conditioning-log.png][Example logs in logging interface]]

You can also adjust what information is displayed on the X and Y axes.

Procedures that are running, have been run or are queued are displayed on the bottom.
You can hide, display or clear the queue.
This will not affect the recorded data.

The actual plot area can be manipulated to see finer features.
When you've adjusted the plot, a small house icon should appear in the bottom-left.
Clicking on that icon will reset the dynamic view.

Finally in the bottom-left of the interface you have the ~Queue~ and ~Abort~ buttons.
~Queue~ adds the current combination of parameters to the queue as a new procedure.
~Abort~ cancels the currently running procedure.
If you abort, you will need to press continue to reassure the system that is is really safe to start a new procedure.

*** Protocol parameters
The remaining fields on the interface are specific to the actual protocol.
First the ~Protocol~ dropdown allows you to select the protocol.
I recommend reading the source or the notes detailed below on the desired protocol to understand which fields are needed and what they do.

~Progress style~ allows you to select what is really displayed in the progress bar when growing a pore to a particular dimension.
~absolute percentage~ means the bar displays a percentage in the range from 0 nm to your target pore size.
For example, if you have a 10 nm pore and you set the target to 20 nm, the bar will start at 50 when the protocol begins since it is an absolute percentage.
~relative percentage~ displays a percentage in the range from starting size to target size.
In the case of the example above, the bar would start at 0.
When the bar reaches 50, it means the pore is halfway between the starting size (10 nm) and the target size (20 nm) so 15 nm.
~physical value~ instead displays the actual pore size in nanometers.
This doesn't have very high resolution but is much more human readable if you don't want to be checking the logs.
None of the progress display options affect the recorded data.

~Pipette offset (mV)~ will adjust all applied voltages based on the offset.
You can estimate the best parameter to set here using the ~Pipette Offset~ protocol or the ~IV Curve~ protocol.

The remaining parameters are specific to different protocols.

** Code and procedures

*** poreutils.py
This is an associated module which I've written to be imported by the main pore conditioning script.
I separated it into its own module because it provides helpful functions that could be used in a variety of scripts.
In particular with ~estimate_diameter()~ it can perform the pore diameter calculation.

*** quick-plot.py
This is just a quick-dirty-plotting tool which doesn't perform any analysis or cleaning of the data.
If you have this on a Microsoft Windows machine, you can drag and drop a data CSV directly onto the icon for this script and it will perform the plot.
Feel free to extend to fit your needs using this as a framework.

[[file:assets/quick-plot.png][Result of dropping a data file onto quick-plot.py]]

#+BEGIN_SRC python
# import necessary packages
import sys
import csv
import matplotlib.pyplot as plt

# this will allow dragging and dropping csv's to plot on Windows
file = sys.argv[1]

# setup arrays
time = []
voltage = []
current = []

# open csv
with open(file, newline='') as csvfile:
    reader = csv.reader(csvfile)
    for row in reader:
        # ignore protocol details
        if row[0][0] != '#' and row[0][0] != 'T':
            time.append(float(row[0]))
            voltage.append(float(row[1]))
            current.append(float(row[2]) * 10E9)

# plot
plt.plot(time, current, '-', label='data')
plt.xlabel('time (s)')
plt.ylabel('current (nA)')
plt.legend()
plt.show()
#+END_SRC

*** condition-pore.py
This is the meat of the project.
The script depends heavily on the [[https://github.com/pymeasure/pymeasure][PyMeasure]] project which is quit extensive.
By default it already supported a Qt-based graphical interface with protocols.
Using this as a base, I've extended the library to accept new interface options.
I've also defined many protocols useful for conditioning pores.
I've made a great effort to keep the code as organized and clean as possible so that others can extend it more easily.

**** Pipette Offset Protocol
Check the current when no voltage is applied.
If the current is above some internal threshold (1 nA), we need to determine the pipette offset for future measurements.
This is acheived by performing a binary search algorithm.
Go to 1/2 of the max offset (with appropriate sign) and test the current at that point.
If too high, cut that value in half and subtract it.
If too low, cut in half and add it.
Repeat until the process has run 15 times.
This gets quite close to the ideal offset value although it takes some time.
The recommended offset is output to the log and should be put into the appropriate mode.

**** TODO Holding Voltage

**** TODO IV curve

**** TODO big IV curve

**** TODO estimate pore diameter

**** TODO condition/grow

**** TODO grow to dimension

**** TODO square wave condition/grow

**** TODO square wave for time

**** TODO square wave grow to dimension

**** TODO square wave symmetrize

** License

MIT License
Copyright (c) 2022 Xavier Capaldi

